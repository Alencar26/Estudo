basePath: /
definitions:
  dto.CreateProductInput:
    properties:
      name:
        type: string
      price:
        type: integer
    type: object
  dto.CreateUserInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  dto.Error:
    properties:
      message:
        type: string
    type: object
  dto.GetJWTInput:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.GetJwtOutput:
    properties:
      access_token:
        type: string
    type: object
  dto.GetProductOutput:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: integer
    type: object
host: localhost:8000
info:
  contact:
    email: email.example@email.com
    name: André Alencar
    url: http://github.com/alencar26
  description: Product API with authenticator
  license:
    name: Alencar26
    url: http://github.com/alencar26
  termsOfService: http://swagger.io/terms/
  title: Go Project API with Go-Chi
  version: "1.0"
paths:
  /products:
    get:
      description: Listagem de todos os registros de produtos da base de dados.
      parameters:
      - description: page number
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      - description: sort
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.GetProductOutput'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Error'
      security:
      - ApiKeyAuth: []
      summary: Get product
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Criação de regstro de produtos na base de dados.
      parameters:
      - description: product request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "501":
          description: Not Implemented
          schema:
            $ref: '#/definitions/dto.Error'
      security:
      - ApiKeyAuth: []
      summary: Create product
      tags:
      - products
  /products/{id}:
    delete:
      description: Deleção de um restro de produto na base de dados utilizando-se
        do ID para identificar o registro.
      parameters:
      - description: id
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete product
      tags:
      - products
    get:
      description: Retorna um registro de produtos da base de dados utilizando-se
        do ID para buscar.
      parameters:
      - description: id
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetProductOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Error'
      security:
      - ApiKeyAuth: []
      summary: Get product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Atualização do restro de produto na base de dados utilizandos-se
        do ID para identificar o registro.
      parameters:
      - description: id
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: request update product
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Error'
      security:
      - ApiKeyAuth: []
      summary: Update product
      tags:
      - products
  /users:
    post:
      consumes:
      - application/json
      description: Create User
      parameters:
      - description: user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Error'
      summary: Create User
      tags:
      - users
  /users/generate_token:
    post:
      consumes:
      - application/json
      description: Get a user JWT
      parameters:
      - description: user credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GetJWTInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetJwtOutput'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Error'
      summary: Get a user JWT
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: heather
    name: Authorization
    type: apiKey
swagger: "2.0"
